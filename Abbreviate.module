<?php

/**
 * ProcessWire 'Abbreviate' module
 *
 * hooks the save event to extract and mark all abbreviations
 *
 * Sven SchÃ¼ring <ssch@zenmotion.de>
 * http://www.zenmotion.de
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */

require_once('Abbreviation.php');

class Abbreviate extends WireData implements Module
{
    /**
     * database table name
     */
    const TABLE = 'abbreviations';

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * @return array
     */
    public static function getModuleInfo()
    {
        return [
            'title'    => 'Abbreviate',
            'version'  => 001,
            'summary'  => 'Easily mark up and manage abbreviations',
            'href'     => 'http://www.zenmotion.de',
            'singular' => true,
            'autoload' => true,
            'icon'     => 'smile-o',
            'installs' => 'ProcessAbbreviate',
        ];
    }

    /**
     * initialize the module
     * @return void
     */
    public function init()
    {
        $this->pages->addHookAfter('save', $this, 'handle');
    }

    /**
     * main module handling
     * @param  HookEvent $event
     * @return void
     */
    public function handle(HookEvent $event)
    {
        $page = $event->arguments[0];

        $abbreviations = [];
        foreach ($page->fields as $field) {
            if ($field->type instanceof FieldtypeTextarea) {
                $fieldName = $field->name;

                $abbreviations = array_merge($abbreviations, $this->extractAbbreviations($page->$fieldName));
            }
        }

        if (count($abbreviations) > 0) {
            $this->insert($abbreviations);

            $this->message(count($abbreviations) .' abbreviations found');
        }
    }

    /**
     * Extract all abbreviations and returns a array of Abbreviation
     * @param  string $text
     * @return array
     */
    public function extractAbbreviations($text)
    {
        preg_match_all('/<abbr.*title="(.*)".*>(.*)<\/abbr>/U', $text, $matches);

        foreach ($matches[0] as $key => $value) {
            $abbreviation = new Abbreviation();
            $abbreviation->setText(trim($matches[2][$key]));
            $abbreviation->setTitle(trim($matches[1][$key]));

            $abbreviations[] = $abbreviation;
        }

        return isset($abbreviations) ? $abbreviations : [];
    }

    /**
     * Inserts all objects of Abbreviation
     * @param  array  $abbreviations
     * @return boolean
     */
    public function insert(array $abbreviations)
    {
        foreach ($abbreviations as $abbreviation) {
            $values[] = '("'. $abbreviation->getText() .'", "'. $abbreviation->getTitle() .'")';
        }

        $sql = 'INSERT INTO '. self::TABLE .'(`text`, `title`) VALUES '. implode(',', $values) .'ON DUPLICATE KEY UPDATE title=title';

        try {
            if ($this->database->query($sql))
                return true;
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }

        return false;
    }

    /**
     * delete the given abbreviation
     * @param  Abbreviation $abbreviation
     * @return boolean
     */
    public function delete(Abbreviation $abbreviation)
    {
        $sql = 'DELETE FROM '. self::TABLE .' WHERE `id`=:id';

        try {
            $query = $this->database->prepare($sql);
            $query->bindValue(':id', $abbreviation->getId());
            if ($query->execute())
                return true;
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }

        return false;
    }

    /**
     * Find all saved abbreviations and return a array of Abbreviation
     * @return array|false
     */
    public function findAll()
    {
        $sql = 'SELECT * FROM '. self::TABLE;

        try {
            $query = $this->database->prepare($sql);
            $query->execute();

            while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
                $abbreviation = new Abbreviation();
                $abbreviation->setId($row['id']);
                $abbreviation->setText($row['text']);
                $abbreviation->setTitle($row['title']);

                $abbreviations[] = $abbreviation;
            }
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }

        return isset($abbreviations) ? $abbreviations : false;
    }

    /**
     * Find one abbreviation by id and return a array of Abbreviation
     * @param  string $id
     * @return array|false
     */
    public function findOneById($id)
    {
        $sql = 'SELECT * FROM '. self::TABLE .' WHERE `id`=:id';

        try {
            $query = $this->database->prepare($sql);
            $query->bindValue(':id', $id);
            $query->execute();

            while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
                $abbreviation = new Abbreviation();
                $abbreviation->setId($row['id']);
                $abbreviation->setText($row['text']);
                $abbreviation->setTitle($row['title']);
            }
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }

        return isset($abbreviation) ? $abbreviation : false;
    }

    /**
     * Find all abbreviations by text and return a array of Abbreviation
     * @param  string $text
     * @return array|false
     */
    public function findAllByText($text)
    {
        $sql = 'SELECT * FROM '. self::TABLE .' WHERE `text`=:text';

        try {
            $query = $this->database->prepare($sql);
            $query->bindValue(':text', $text);
            $query->execute();

            while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
                $abbreviation = new Abbreviation();
                $abbreviation->setId($row['id']);
                $abbreviation->setText($row['text']);
                $abbreviation->setTitle($row['title']);

                $abbreviations[] = $abbreviation;
            }
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }

        return isset($abbreviations) ? $abbreviations : false;
    }

    /**
     * called when the module will installed
     * @return void
     */
    public function ___install()
    {
        $sql = 'CREATE TABLE '. self::TABLE .'('.
               '`id` int unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY, '.
               '`text` varchar(128) NOT NULL, '.
               '`title` varchar(255) NOT NULL, '.
               'UNIQUE `title`(`title`)'.
               ');';

        try {
            $this->database->query($sql);
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }

    /**
     * called when the module will uninstalled
     * @return void
     */
    public function ___uninstall()
    {
        $sql = 'DROP TABLE '. self::TABLE .';';

        try {
            $this->database->query($sql);
        } catch (Exception $e) {
            $this->error($e->getMessage());
        }
    }
}
